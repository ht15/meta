class rpc_helper_{{class_name}}
{
    {{#rpc_methods}}
    static bool {{rpc_name}}({{class_name}}* rpc_owner, const spiritsaway::msg::rpc_msg& cur_rpc)
    {
        {{#rpc_args}}
        {{{arg_type}}} {{arg_name}};
        {{/rpc_args}}
        if(!spiritsaway::serialize::decode_multi(cur_rpc.args, {{#rpc_args}} {{arg_name}} {{^last_idx}},{{last_idx}}{{/rpc_args}}))
        {
            rpc_owner()->get_logger()->error("fail to prase args for cmd {} with args {}", cur_rpc.cmd, cur_rpc.args);
            return false;
        }
        rpc_owner()->{{rpc_name}}({{#rpc_args}} {{arg_name}} {{^last_idx}},{{last_idx}}{{/rpc_args}});
        return true;
    }
    {{/rpc_methods}}
    public:
    static const std::unordered_map<std::string, std::uint32_t>& get_rpc_map()
    {
        static std::unordered_map<std::string, std::uint32_t> cur_rpc_map = {
            {{#rpc_methods}}
            { {{rpc_name}}, {{rpc_index}} } {{^last_rpc}},{{/last_rpc}}
            {{/rpc_methods}}
        }
    }
    static bool rpc_call({{class_name}}* rpc_owner, const spiritsaway::msg::rpc_msg& cur_rpc)
    {
        auto& cur_rpc_map = get_rpc_map();
        auto cur_iter = cur_rpc_map.find(cur_rpc.cmd);
        if(cur_iter == cur_rpc_map.end())
        {
            return false;
        }
        switch(cur_iter->second)
        {
            {{#rpc_methods}}
            case {{rpc_index}}:
                return {{rpc_name}}(rpc_owner, cur_rpc);
            {{/rpc_methods}}
            default:
                return false;
        }
    }
}