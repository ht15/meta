private:
static std::unordered_map<std::string, std::pair<int, int>> attr_var_map;
static void init_attr_var_map(); // called in _static_constructor_
std::pair<void*, int> var_address_for_name(const std::string& var_name) const;
public:
static bool has_attr_var(const std::string& var_name);
template <typename T>
static bool has_attr_var_with_type(const std::string& var_name)
{
	auto cur_iter = attr_var_map.find(var_name);
	if(cur_iter == attr_var_map.end())
	{
		return false;
	}
	else
	{
		auto cur_type_map = meta::utils::type_map<std::string>();
		return cur_type_map.can_convert_from<T>(cur_iter->second.second);
	}
}
template <typename T>
std::optional<std::reference_wrapper<T>> get_attr_var(const std::string& var_name)
{
	auto cur_type_map = utils::type_map<std::string>();
	auto[result_p, type_idx] = var_address_for_name(var_name);
	if (!result_p)
	{
		return {};
	}
	if (!cur_type_map.can_convert_from<T &>(type_idx))
	{
		return {};
	}
	else
	{
		return std::ref(*reinterpret_cast<T*>(result_p));
	}
}
template <typename T>
std::optional<std::reference_wrapper<std::add_const_t<T>>> get_attr_var(const std::string& var_name) const
{
	auto cur_type_map = utils::type_map<std::string>();
	auto[result_p, type_idx] = var_address_for_name(var_name);
	if (!result_p)
	{
		return {};
	}
	if (!cur_type_map.can_convert_from<std::add_const_t<T> &>(type_idx))
	{
		return {};
	}
	else
	{
		return std::cref(*reinterpret_cast<std::add_const_t<T> *>(result_p));
	}
}
private:

